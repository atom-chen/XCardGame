local _math_floor = math.floor
local _math_sqrt = math.sqrt
local _math_atan = math.atan
local _math_atan2 = math.atan2
local _math_cos = math.cos
local _math_sin = math.sin
--[[
	本文件依赖的坐标系和角度体系为:
	1. 坐标系: 左下角为原点,x轴向右增加,y轴向上增加
	2. 角度: 坐标系y轴正轴为0度角, 顺时针方向增加
]]


local BASE_VALUE = 10000
local ANGLE_XY = {
	{ 0, 10000},{ 174, 9998},{ 348, 9993},{ 523, 9986},{ 697, 9975},{ 871, 9961},{ 1045, 9945},{ 1218, 9925},{ 1391, 9902},{ 1564, 9876},	-- 9
	{ 1736, 9848},{ 1908, 9816},{ 2079, 9781},{ 2249, 9743},{ 2419, 9702},{ 2588, 9659},{ 2756, 9612},{ 2923, 9563},{ 3090, 9510},{ 3255, 9455},	-- 19
	{ 3420, 9396},{ 3583, 9335},{ 3746, 9271},{ 3907, 9205},{ 4067, 9135},{ 4226, 9063},{ 4383, 8987},{ 4539, 8910},{ 4694, 8829},{ 4848, 8746},	-- 29
	{ 4999, 8660},{ 5150, 8571},{ 5299, 8480},{ 5446, 8386},{ 5591, 8290},{ 5735, 8191},{ 5877, 8090},{ 6018, 7986},{ 6156, 7880},{ 6293, 7771},	-- 39
	{ 6427, 7660},{ 6560, 7547},{ 6691, 7431},{ 6819, 7313},{ 6946, 7193},{ 7071, 7071},{ 7193, 6946},{ 7313, 6819},{ 7431, 6691},{ 7547, 6560},	-- 49
	{ 7660, 6427},{ 7771, 6293},{ 7880, 6156},{ 7986, 6018},{ 8090, 5877},{ 8191, 5735},{ 8290, 5591},{ 8386, 5446},{ 8480, 5299},{ 8571, 5150},	-- 59
	{ 8660, 5000},{ 8746, 4848},{ 8829, 4694},{ 8910, 4539},{ 8987, 4383},{ 9063, 4226},{ 9135, 4067},{ 9205, 3907},{ 9271, 3746},{ 9335, 3583},	-- 69
	{ 9396, 3420},{ 9455, 3255},{ 9510, 3090},{ 9563, 2923},{ 9612, 2756},{ 9659, 2588},{ 9702, 2419},{ 9743, 2249},{ 9781, 2079},{ 9816, 1908},	-- 79
	{ 9848, 1736},{ 9876, 1564},{ 9902, 1391},{ 9925, 1218},{ 9945, 1045},{ 9961, 871},{ 9975, 697},{ 9986, 523},{ 9993, 348},{ 9998, 174},	-- 89
	{ 10000, 0},{ 9998, -174},{ 9993, -348},{ 9986, -523},{ 9975, -697},{ 9961, -871},{ 9945, -1045},{ 9925, -1218},{ 9902, -1391},{ 9876, -1564},	-- 99
	{ 9848, -1736},{ 9816, -1908},{ 9781, -2079},{ 9743, -2249},{ 9702, -2419},{ 9659, -2588},{ 9612, -2756},{ 9563, -2923},{ 9510, -3090},{ 9455, -3255},	-- 109
	{ 9396, -3420},{ 9335, -3583},{ 9271, -3746},{ 9205, -3907},{ 9135, -4067},{ 9063, -4226},{ 8987, -4383},{ 8910, -4539},{ 8829, -4694},{ 8746, -4848},	-- 119
	{ 8660, -4999},{ 8571, -5150},{ 8480, -5299},{ 8386, -5446},{ 8290, -5591},{ 8191, -5735},{ 8090, -5877},{ 7986, -6018},{ 7880, -6156},{ 7771, -6293},	-- 129
	{ 7660, -6427},{ 7547, -6560},{ 7431, -6691},{ 7313, -6819},{ 7193, -6946},{ 7071, -7071},{ 6946, -7193},{ 6819, -7313},{ 6691, -7431},{ 6560, -7547},	-- 139
	{ 6427, -7660},{ 6293, -7771},{ 6156, -7880},{ 6018, -7986},{ 5877, -8090},{ 5735, -8191},{ 5591, -8290},{ 5446, -8386},{ 5299, -8480},{ 5150, -8571},	-- 149
	{ 4999, -8660},{ 4848, -8746},{ 4694, -8829},{ 4539, -8910},{ 4383, -8987},{ 4226, -9063},{ 4067, -9135},{ 3907, -9205},{ 3746, -9271},{ 3583, -9335},	-- 159
	{ 3420, -9396},{ 3255, -9455},{ 3090, -9510},{ 2923, -9563},{ 2756, -9612},{ 2588, -9659},{ 2419, -9702},{ 2249, -9743},{ 2079, -9781},{ 1908, -9816},	-- 169
	{ 1736, -9848},{ 1564, -9876},{ 1391, -9902},{ 1218, -9925},{ 1045, -9945},{ 871, -9961},{ 697, -9975},{ 523, -9986},{ 348, -9993},{ 174, -9998},	-- 179
	{ 0, -10000},{ -174, -9998},{ -348, -9993},{ -523, -9986},{ -697, -9975},{ -871, -9961},{ -1045, -9945},{ -1218, -9925},{ -1391, -9902},{ -1564, -9876},	-- 189
	{ -1736, -9848},{ -1908, -9816},{ -2079, -9781},{ -2249, -9743},{ -2419, -9702},{ -2588, -9659},{ -2756, -9612},{ -2923, -9563},{ -3090, -9510},{ -3255, -9455},	-- 199
	{ -3420, -9396},{ -3583, -9335},{ -3746, -9271},{ -3907, -9205},{ -4067, -9135},{ -4226, -9063},{ -4383, -8987},{ -4539, -8910},{ -4694, -8829},{ -4848, -8746},	-- 209
	{ -5000, -8660},{ -5150, -8571},{ -5299, -8480},{ -5446, -8386},{ -5591, -8290},{ -5735, -8191},{ -5877, -8090},{ -6018, -7986},{ -6156, -7880},{ -6293, -7771},	-- 219
	{ -6427, -7660},{ -6560, -7547},{ -6691, -7431},{ -6819, -7313},{ -6946, -7193},{ -7071, -7071},{ -7193, -6946},{ -7313, -6819},{ -7431, -6691},{ -7547, -6560},	-- 229
	{ -7660, -6427},{ -7771, -6293},{ -7880, -6156},{ -7986, -6018},{ -8090, -5877},{ -8191, -5735},{ -8290, -5591},{ -8386, -5446},{ -8480, -5299},{ -8571, -5150},	-- 239
	{ -8660, -5000},{ -8746, -4848},{ -8829, -4694},{ -8910, -4539},{ -8987, -4383},{ -9063, -4226},{ -9135, -4067},{ -9205, -3907},{ -9271, -3746},{ -9335, -3583},	-- 249
	{ -9396, -3420},{ -9455, -3255},{ -9510, -3090},{ -9563, -2923},{ -9612, -2756},{ -9659, -2588},{ -9702, -2419},{ -9743, -2249},{ -9781, -2079},{ -9816, -1908},	-- 259
	{ -9848, -1736},{ -9876, -1564},{ -9902, -1391},{ -9925, -1218},{ -9945, -1045},{ -9961, -871},{ -9975, -697},{ -9986, -523},{ -9993, -348},{ -9998, -174},	-- 269
	{ -10000, 0},{ -9998, 174},{ -9993, 348},{ -9986, 523},{ -9975, 697},{ -9961, 871},{ -9945, 1045},{ -9925, 1218},{ -9902, 1391},{ -9876, 1564},	-- 279
	{ -9848, 1736},{ -9816, 1908},{ -9781, 2079},{ -9743, 2249},{ -9702, 2419},{ -9659, 2588},{ -9612, 2756},{ -9563, 2923},{ -9510, 3090},{ -9455, 3255},	-- 289
	{ -9396, 3420},{ -9335, 3583},{ -9271, 3746},{ -9205, 3907},{ -9135, 4067},{ -9063, 4226},{ -8987, 4383},{ -8910, 4539},{ -8829, 4694},{ -8746, 4848},	-- 299
	{ -8660, 5000},{ -8571, 5150},{ -8480, 5299},{ -8386, 5446},{ -8290, 5591},{ -8191, 5735},{ -8090, 5877},{ -7986, 6018},{ -7880, 6156},{ -7771, 6293},	-- 309
	{ -7660, 6427},{ -7547, 6560},{ -7431, 6691},{ -7313, 6819},{ -7193, 6946},{ -7071, 7071},{ -6946, 7193},{ -6819, 7313},{ -6691, 7431},{ -6560, 7547},	-- 319
	{ -6427, 7660},{ -6293, 7771},{ -6156, 7880},{ -6018, 7986},{ -5877, 8090},{ -5735, 8191},{ -5591, 8290},{ -5446, 8386},{ -5299, 8480},{ -5150, 8571},	-- 329
	{ -5000, 8660},{ -4848, 8746},{ -4694, 8829},{ -4539, 8910},{ -4383, 8987},{ -4226, 9063},{ -4067, 9135},{ -3907, 9205},{ -3746, 9271},{ -3583, 9335},	-- 339
	{ -3420, 9396},{ -3255, 9455},{ -3090, 9510},{ -2923, 9563},{ -2756, 9612},{ -2588, 9659},{ -2419, 9702},{ -2249, 9743},{ -2079, 9781},{ -1908, 9816},	-- 349
	{ -1736, 9848},{ -1564, 9876},{ -1391, 9902},{ -1218, 9925},{ -1045, 9945},{ -871, 9961},{ -697, 9975},{ -523, 9986},{ -348, 9993},{ -174, 9998},	-- 359
}

local _angle_radian = (math.pi / 180)
-- 根据角度和原始值,计算出x轴和y轴上的分量
function MathAngle_calcAngleXY( angle, value )
	angle = (angle + 90 ) * _angle_radian
	return value * _math_cos( angle ),value * _math_sin( angle )
end

-- 计算两点距离
function MathAngle_distance( x1, y1, x2, y2 )
	x2 = x2 - x1
	y2 = y2 - y1
	return _math_sqrt( x2 * x2 + y2 * y2 )
end

-- 以x1,y1为圆心, x2,y2为圆周上一点,计算角度
--  +0.5 的目的是为了四舍五入
local _angle_r2a = 180 / 3.1415
function MathAngle_pointAngle( x1, y1, x2, y2 )
	return _math_atan2( y2 - y1, x2 - x1) * _angle_r2a
end

--[[
	检测两个是否矩形相交
	参数要求: 
		r1,r2为两个矩形的对角顶点坐标 { x1, y1, x2, y2} ,并要求 x1,y1为左下角, x2,y2为右上角
	计算原理待验证:  
		矩形相交的原理为反证法, 以r1为标准, 当r2同时满足不在r1的上下左右四个方向时,即认为r1和r2相交
]]
function MathAngle_checkRectsIntersection( r1, r2 )
	local r1x1,r1y1,r1x2,r1y2 = unpack( r1 )
	local r2x1,r2y1,r2x2,r2y2 = unpack( r2 )

-- 	if not (r1x2 < r2x1) and not (r1x1 > r2x2) and not ( r1y1 > r2y2 ) and not ( r2y1 > r1y2 ) then
	if r1x2 >= r2x1 and r1x1 <= r2x2 and r1y1 <= r2y2  and r2y1 <= r1y2 then
		return true
	end
	return false
end

--[[
	检测圆和AABB矩形相交
--]]
function MathAngle_checkRectAndCircleIntersection( rect, circle )
	local x1, y1, x2, y2, halfWidth, halfHeight = unpack( rect )
	local cX, cY, cR = unpack( circle )
	local c = { (x1 + x2) * 0.5, (y1 + y2) * 0.5 }			-- 矩形中心
	local h = { halfWidth, halfHeight }						-- 矩形中心到第一象限角的矢量
	local v = { math.abs(cX - c[1]), math.abs(cY - c[2]) }	-- 第1步：转换至第1象限
	local u = { v[1] - h[1], v[2] - h[2] }					-- 第2步：求圆心至矩形的最短距离矢量
	if u[1] < 0 then u[1] = 0 end
	if u[2] < 0 then u[2] = 0 end
	return ((u[1] * u[1] + u[2] * u[2]) < (cR * cR))		-- 第3步：长度平方与半径平方比较
end

function _AixsPolygonProject( axis, polygon )
	assert( #polygon > 2 )
	local dotProduct = axis[1] * polygon[1][1] + axis[2] * polygon[1][2]
	local minVal=dotProduct
	local maxVal=dotProduct
	local pointsNum = #polygon
	for i = 2, pointsNum do
		dotProduct = axis[1] * polygon[i][1] + axis[2] * polygon[i][2]
		if dotProduct < minVal then
			minVal = dotProduct
		elseif dotProduct > maxVal then
			maxVal = dotProduct
		end
	end
	return minVal, maxVal
end

--[[
	分离坐标轴方法检测两个凸多边形是否相交
	polyA和polyB分别是两个凸多边形的顶点数组
	算法基本参照
	http://blog.csdn.net/zc55803903/article/details/7837918
	http://www.codeproject.com/Articles/15573/D-Polygon-Collision-Detection
--]]
function MathAngle_checkPolygonIntersection( polyA, polyB )
	assert( #polyA > 2 and #polyB > 2 )
	local edgeNumA = #polyA
	local edgeNumB = #polyB
	local totalCount = edgeNumA + edgeNumB
	local intersect = true
	local axis, edge, interval, normalizedAxis, length, minA, maxA, minB, maxB 
	--遍历每个边，把多边形向法线进行映射,如果找到不相交的投影，则说明两凸多边形不想交
	for i = 1, totalCount do
		if i <= edgeNumA then
			local beginIdx = i
			local endIdx = i + 1
			if i == edgeNumA then 
				endIdx = 1 
			end
			edge = { polyA[endIdx][1] - polyA[beginIdx][1], polyA[endIdx][2] - polyA[beginIdx][2] }
		else
			local beginIdx = (i - edgeNumA)
			local endIdx = (i - edgeNumA + 1)
			if i == totalCount then 
				endIdx = 1 
			end
			edge = { polyB[endIdx][1] - polyB[beginIdx][1], polyB[endIdx][2] - polyB[beginIdx][2] }
		end
		length = math.sqrt(edge[1] * edge[1] + edge[2] * edge[2])
		normalizedAxis = { -edge[2] / length, edge[1] / length }
		minA, maxA = _AixsPolygonProject( normalizedAxis, polyA )
		minB, maxB = _AixsPolygonProject( normalizedAxis, polyB )
		if (minA < minB) then
			interval = minB - maxA
		else
			interval = minA - maxB
		end
		if interval > 0 then
			return false
		end
	end
	return true
end